import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.Socket;
import java.net.UnknownHostException;
import java.nio.charset.Charset;



/**
 * wireshark  grpc 客户端 发送报文
 * 
--test


--test

505249202a20485454502f322e300d0a0d0a534d0d0a0d0a000018040000000000000200000000000300000000000400100000000600002000
000004080000000000000f0001
000000040100000000

000076012400000003000000000f418ca0e41d0b4d65645905b3b96c44946272d141fc1eca245f71a9ae82b1b87eb1968a0f83865f8b1d75d0620d263d4c4d656440027465864d833505b11f7a909acac8b741f71ad51529f4c057081707408e9acac8b0c842d6958b510f21aa9b839bd9ab408a9acac8b26c190ab466ab0000000b00010000000300000000060a0474657374


--testa

505249202a20485454502f322e300d0a0d0a534d0d0a0d0a000018040000000000000200000000000300000000000400100000000600002000
000004080000000000000f0001
000000040100000000
000076012400000003000000000f418ca0e41d0b4d65645905b3b96c44946272d141fc1eca245f71a9ae82b1b87eb1968a0f83865f8b1d75d0620d263d4c4d656440027465864d833505b11f7a909acac8b741f71ad51529f4c057081707408e9acac8b0c842d6958b510f21aa9b839bd9ab408a9acac8b26c190ab466ab0000000c00010000000300000000070a057465737461

--testb
505249202a20485454502f322e300d0a0d0a534d0d0a0d0a000018040000000000000200000000000300000000000400100000000600002000
000004080000000000000f0001
000000040100000000
000076012400000003000000000f418ca0e41d0b4d65645905b3b96c44946272d141fc1eca245f71a9ae82b1b87eb1968a0f83865f8b1d75d0620d263d4c4d656440027465864d833505b11f7a909acac8b741f71ad51529f4c057081707408e9acac8b0c842d6958b510f21aa9b839bd9ab408a9acac8b26c190ab466ab0000000c00010000000300000000070a057465737462


--testdd
505249202a20485454502f322e300d0a0d0a534d0d0a0d0a000018040000000000000200000000000300000000000400100000000600002000
000004080000000000000f0001
000000040100000000
000076012400000003000000000f418ca0e41d0b4d65645905b3b96c44946272d141fc1eca245f71a9ae82b1b87eb1968a0f83865f8b1d75d0620d263d4c4d656440027465864d833505b11f7a909acac8b741f71ad51529f4c057081707408e9acac8b0c842d6958b510f21aa9b839bd9ab408a9acac8b26c190ab466ab0000000d00010000000300000000080a06746573746464


----------------0d,08,06(十进制：13,8,6)
0000000d00010000000300000000080a06746573746464

--testd1234567890


505249202a20485454502f322e300d0a0d0a534d0d0a0d0a000018040000000000000200000000000300000000000400100000000600002000
000004080000000000000f0001
000000040100000000
000076012400000003000000000f418ca0e41d0b4d65645905b3b96c44946272d141fc1eca245f71a9ae82b1b87eb1968a0f83865f8b1d75d0620d263d4c4d656440027465864d833505b11f7a909acac8b741f71ad51529f4c057081707408e9acac8b0c842d6958b510f21aa9b839bd9ab408a9acac8b26c190ab466ab0000001600010000000300000000110a0f746573746431323334353637383930


----------------16,11,0f(十进制：22,17,15)
0000001600010000000300000000110a0f746573746431323334353637383930



*
*
*
 */
public class TCPClient {
	
	static String head = "505249202a20485454502f322e300d0a0d0a534d0d0a0d0a000018040000000000000200000000000300000000000400100000000600002000000004080000000000000f0001000000040100000000";

	
	//固定16进制sayHelloMethod 前缀
	static String sayHelloMethod = "000076012400000003000000000f418ca0e41d0b4d65645905b3b96c44946272d141fc1eca245f71a9ae82b1b87eb1968a0f83865f8b1d75d0620d263d4c4d656440027465864d833505b11f7a909acac8b741f71ad51529f4c057081707408e9acac8b0c842d6958b510f21aa9b839bd9ab408a9acac8b26c190ab466ab000000";
	
	
	public static String hexMethod(String hexMethod,String str) {
		int strLen = str.getBytes().length;
		int strOaLen = strLen+2;
		int len = strOaLen + 5;
		String d = String.format("%02x", len)+"00010000000300000000"+String.format("%02x", strOaLen)+"0a"+String.format("%02x", strLen)+TypeConversion.bytes2HexString(str.getBytes());
		System.out.println(d);
		return head+sayHelloMethod +d;
	}
	
	
	public static void main(String[] args) {

		//test();
		String data = hexMethod(sayHelloMethod, "tsadasdasda你好啊");
		System.out.println(data);
		test2(data);
	}
	
	public static void test2(String data) {
		int serverPort = 9898;
		Socket sock;

		try {
			sock = new Socket("localhost", serverPort);

			BufferedReader in = new BufferedReader(
					new InputStreamReader(sock.getInputStream(), Charset.forName("UTF-8")));


			OutputStream out = sock.getOutputStream();
			

			byte[] bytes = TypeConversion.hexString2Bytes(data);
			out.write(bytes);
			out.flush();

			String inputLine = in.readLine();
			System.out.println("Data : " + inputLine);

			in.close();
			out.close();
			sock.close();

		} catch (UnknownHostException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public static void test() {

		//没问题 test
		String data = "505249202a20485454502f322e300d0a0d0a534d0d0a0d0a000018040000000000000200000000000300000000000400100000000600002000000004080000000000000f0001000000040100000000000076012400000003000000000f418ca0e41d0b4d65645905b3b96c44946272d141fc1eca245f71a9ae82b1b87eb1968a0f83865f8b1d75d0620d263d4c4d656440027465864d833505b11f7a909acac8b741f71ad51529f4c057081707408e9acac8b0c842d6958b510f21aa9b839bd9ab408a9acac8b26c190ab466ab0000000b00010000000300000000060a047465737474657374";
        
		//testb
		 data =       "505249202a20485454502f322e300d0a0d0a534d0d0a0d0a000018040000000000000200000000000300000000000400100000000600002000000004080000000000000f0001000000040100000000000076012400000003000000000f418ca0e41d0b4d65645905b3b96c44946272d141fc1eca245f71a9ae82b1b87eb1968a0f83865f8b1d75d0620d263d4c4d656440027465864d833505b11f7a909acac8b741f71ad51529f4c057081707408e9acac8b0c842d6958b510f21aa9b839bd9ab408a9acac8b26c190ab466ab0000000c00010000000300000000070a057465737462";
        //testc
		 data =       "505249202a20485454502f322e300d0a0d0a534d0d0a0d0a000018040000000000000200000000000300000000000400100000000600002000000004080000000000000f0001000000040100000000000076012400000003000000000f418ca0e41d0b4d65645905b3b96c44946272d141fc1eca245f71a9ae82b1b87eb1968a0f83865f8b1d75d0620d263d4c4d656440027465864d833505b11f7a909acac8b741f71ad51529f4c057081707408e9acac8b0c842d6958b510f21aa9b839bd9ab408a9acac8b26c190ab466ab0000000c00010000000300000000070a057465737463";
	    
		 //testd
		 data =       "505249202a20485454502f322e300d0a0d0a534d0d0a0d0a000018040000000000000200000000000300000000000400100000000600002000000004080000000000000f0001000000040100000000000076012400000003000000000f418ca0e41d0b4d65645905b3b96c44946272d141fc1eca245f71a9ae82b1b87eb1968a0f83865f8b1d75d0620d263d4c4d656440027465864d833505b11f7a909acac8b741f71ad51529f4c057081707408e9acac8b0c842d6958b510f21aa9b839bd9ab408a9acac8b26c190ab466ab0000000c00010000000300000000070a057465737464";
		   
		 //testdd 
		 data =       "505249202a20485454502f322e300d0a0d0a534d0d0a0d0a000018040000000000000200000000000300000000000400100000000600002000000004080000000000000f0001000000040100000000000076012400000003000000000f418ca0e41d0b4d65645905b3b96c44946272d141fc1eca245f71a9ae82b1b87eb1968a0f83865f8b1d75d0620d263d4c4d656440027465864d833505b11f7a909acac8b741f71ad51529f4c057081707408e9acac8b0c842d6958b510f21aa9b839bd9ab408a9acac8b26c190ab466ab0000000d00010000000300000000080a06746573746464";
			
		 
		 //testdd 有问题
		 data =       "505249202a20485454502f322e300d0a0d0a534d0d0a0d0a000018040000000000000200000000000300000000000400100000000600002000000004080000000000000f0001000000040100000000000076012400000003000000000f418ca0e41d0b4d65645905b3b96c44946272d141fc1eca245f71a9ae82b1b87eb1968a0f83865f8b1d75d0620d263d4c4d656440027465864d833505b11f7a909acac8b741f71ad51529f4c057081707408e9acac8b0c842d6958b510f21aa9b839bd9ab408a9acac8b26c190ab466ab0000000c00010000000300000000080a06746573746464";
			
        //有问题
		//data = "000076012400000003000000000f418ca0e41d0b4d65645905b3b96c44946272d141fc1eca245f71a9ae82b1b87eb1968a0f83865f8b1d75d0620d263d4c4d656440027465864d833505b11f7a909acac8b741f71ad51529f4c057081707408e9acac8b0c842d6958b510f21aa9b839bd9ab408a9acac8b26c190ab466ab0000000b00010000000300000000060a0474657374"; 
		
		
		
		int serverPort = 9898;
		Socket sock;

		try {
			sock = new Socket("localhost", serverPort);

			BufferedReader in = new BufferedReader(
					new InputStreamReader(sock.getInputStream(), Charset.forName("UTF-8")));

			/*
			 * BufferedWriter out = new BufferedWriter(new OutputStreamWriter(
			 * sock.getOutputStream(),Charset.forName("UTF-8")));
			 */

			OutputStream out = sock.getOutputStream();
			

			byte[] bytes = TypeConversion.hexString2Bytes(data);
			System.out.println("bytes===="+new String(bytes));
			out.write(bytes);
			out.flush();

			String inputLine = in.readLine();
			System.out.println("Data : " + inputLine);

			in.close();
			out.close();
			sock.close();

		} catch (UnknownHostException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	

	public static final byte[] hexStringToByteArray(String hexEncodedBinary) {
		if (hexEncodedBinary.length() % 2 == 0) {
			char[] sc = hexEncodedBinary.toCharArray();
			byte[] ba = new byte[sc.length / 2];

			for (int i = 0; i < ba.length; i++) {
				int nibble0 = Character.digit(sc[i * 2], 16);
				int nibble1 = Character.digit(sc[i * 2 + 1], 16);
				if (nibble0 == -1 || nibble1 == -1) {
					throw new IllegalArgumentException("Hex-encoded binary string contains an invalid hex digit in '"
							+ sc[i * 2] + sc[i * 2 + 1] + "'");
				}
				ba[i] = (byte) ((nibble0 << 4) | (nibble1));
			}

			return ba;
		} else {
			throw new IllegalArgumentException("Hex-encoded binary string contains an uneven no. of digits");
		}
	}

}